<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>generative on Technical Portfolio of Chris Ried</title>
    <link>https://chrisried.xyz/tags/generative/</link>
    <description>Recent content in generative on Technical Portfolio of Chris Ried</description>
    <image>
      <url>https://chrisried.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chrisried.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 08 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://chrisried.xyz/tags/generative/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minature Generative Art</title>
      <link>https://chrisried.xyz/posts/minature-generative-art/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://chrisried.xyz/posts/minature-generative-art/</guid>
      <description>Sometimes something simple can turn out to generate the most beautiful things. Following you will find a few lines of code that present a beautiful pattern.
library(ggplot2) library(dplyr) Oval Curve n &amp;lt;- 300 t1 &amp;lt;- 1:n t0 &amp;lt;- seq(3,2*n+1,2) %% n t2 &amp;lt;- t0 + (t0 == 0)*n df &amp;lt;- data.frame(x = cos((t1-1)*2*pi/n), y = sin((t1-1)*2*pi/n), x2 = cos((t2-1)*2*pi/n), y2 = sin((t2-1)*2*pi/n)) ggplot(df,aes(x,y,xend = x2,yend = y2)) + geom_segment(alpha = .</description>
    </item>
    
    <item>
      <title>Text Generation</title>
      <link>https://chrisried.xyz/posts/text-generation/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chrisried.xyz/posts/text-generation/</guid>
      <description>IN PROGRESS Text Generation (Generative Texr) is a very interesting field of study. There are a number of different packages that help generate the lists of words to give the user a better understanding of the technology.
Tracery The following Node library gives a structure which is used to generate random words that are assigned to lexical structure that is defined by the user.
centar : { animal : [&amp;#34;wolf&amp;#34;,&amp;#34;bear&amp;#34;,&amp;#34;tiger&amp;#34;,&amp;#34;lion&amp;#34;,&amp;#34;snake&amp;#34;,&amp;#34;anteater&amp;#34;], fruit : [&amp;#34;banana&amp;#34;,&amp;#34;tomato&amp;#34;,&amp;#34;cherry&amp;#34;,&amp;#34;strawberry&amp;#34;,&amp;#34;starfruit&amp;#34;], said : [&amp;#34;purring&amp;#34;, &amp;#34;whispering&amp;#34;, &amp;#34;saying&amp;#34;, &amp;#34;murmurring&amp;#34;, &amp;#34;growling&amp;#34;], timeofday : [&amp;#34;morning&amp;#34;,&amp;#34;evening&amp;#34;,&amp;#34;dusk&amp;#34;,&amp;#34;dawn&amp;#34;,&amp;#34;afternoon&amp;#34;,&amp;#34;breakfast&amp;#34;,&amp;#34;breakfast&amp;#34;], lastSyl : &amp;#34;a ia ea u y en am is on an o io i el ios ax ox ix ex izz ius ian ean ekang anth&amp;#34;.</description>
    </item>
    
  </channel>
</rss>
